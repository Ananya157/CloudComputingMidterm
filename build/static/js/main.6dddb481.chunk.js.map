{"version":3,"sources":["Components/StudentList.js","Components/StudentListComponent.js","Components/AddStudent.js","Components/AddStudentComponent.js","Components/StudentInfo.js","Components/StudentInfoComponent.js","Components/UpdateStudentInfo.js","Components/UpdateStudentInfoComponent.js","Components/GoogleBtn.js","App.js","serviceWorker.js","index.js"],"names":["StudentList","props","handlePageClick","e","selectedPage","selected","offset","state","perPage","setState","currentPage","loadMoreData","studentList","orgStudentList","validationError","clicked","value","handleChange","bind","data","this","slice","pageCount","Math","ceil","length","forceUpdate","console","log","localStorage","getItem","that","fetch","method","headers","Headers","btoa","then","responseText","json","response","students","catch","error","event","target","name","id","result","success","alert","componentDidMount","className","style","opacity","margin","to","map","student","key","fullname","level","type","onClick","deleteStudent","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","Component","StudentListComponent","AddStudent","changehandler","handleOptionChange","selectedOption","submitHandler","preventDefault","body","email","course","expectation","JSON","stringify","responseMessage","isInstered","onSubmit","htmlFor","onChange","placeholder","checked","AddStudentComponent","StudentInfo","studentInfo","studentId","res","window","location","href","split","url","StudentInfoComponent","UpdateStudentInfo","studentCourse","studentExpectation","axios","err","studentName","studentEmail","studentLevel","isUpdated","disabled","UpdateStudentInfoComponent","CLIENT_ID","GoogleBtn","isLogined","accessToken","accesskey","secretkey","sessiontoken","login","handleLoginFailure","logout","handleLogoutFailure","ak","sk","st","tokenId","text","parseString","AssumeRoleWithWebIdentityResponse","AssumeRoleWithWebIdentityResult","Credentials","AccessKeyId","SecretAccessKey","SessionToken","setItem","history","push","detail","clientId","buttonText","onLogoutSuccess","onFailure","onSuccess","cookiePolicy","responseType","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6dddb481.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../CSS/Common.css';\nimport { Link } from 'react-router-dom';\nimport ReactPaginate from 'react-paginate';\n\nclass StudentList extends Component { \n    constructor(props) {\n        super(props);\n        this.state = {\n            studentList: [],\n            offset: 0,\n            orgStudentList: [],\n            perPage: 5,\n            currentPage: 0,\n            validationError: \"\",\n            clicked: false,\n            value: ''\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handlePageClick = this.handlePageClick.bind(this);\n    }\n\n     handlePageClick = (e) => {\n        const selectedPage = e.selected;\n        const offset = selectedPage * this.state.perPage;\n\n        this.setState({\n            currentPage: selectedPage,\n            offset: offset\n        }, () => {\n            this.loadMoreData()\n        });\n\n    };\n    loadMoreData() {\n        const data = this.state.orgStudentList;\n        const slice = data.slice(this.state.offset, this.state.offset + this.state.perPage)\n        this.setState({\n            pageCount: Math.ceil(data.length / this.state.perPage),\n            studentList: slice\n        })\n\n    }\n    \n    rerenderParentCallback() {\n        this.forceUpdate();\n    }\n    componentDidMount() {\n        console.log(\"props: \", localStorage.getItem('ak'))\n        var that = this;  \n        fetch('https://kgt1c7bjf4.execute-api.us-east-1.amazonaws.com/dev/students', {\n            method: 'GET',\n            headers: new Headers({\n                'Authorization': 'Basic ' + btoa('username:password'),\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }),\n        }).then((responseText) => {\n            const response = responseText.json();\n            response.then(function (response) {\n                var data = response.data[0].students;\t\n                var slice = data.slice(that.state.offset, that.state.offset + that.state.perPage)\n                that.setState({\n                    pageCount: Math.ceil(data.length / that.state.perPage),\n                    orgStudentList: response.data[0].students,\n                    studentList: slice\n                })\n            });\n        }).catch(error => {\n            console.log(error)\n        })\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n   deleteStudent(id){\n       console.log(id)\n       var that = this;\n       var url = 'https://kgt1c7bjf4.execute-api.us-east-1.amazonaws.com/dev/students/' + id;\n       fetch(url, {\n            method: 'DELETE'\n        }).then((responseText) => {\n            const response = responseText.json();\n            response.then(function (result) {\n                console.log(result)\n                if (result.success) {\n                    alert('Deleted Student Record');\n                    that.componentDidMount();\n                }\n            }); \n        }).catch(error => {\n            console.log(error)\n        })\n   }\n\n    render() {\n        \n        return (\n        <div>\n            <div className=\"card cardStyle\" style={{ opacity: \"0.9\" }}>\n                <div className=\"container searchHeader\">\n                    <div className=\"row\">\n                        <div className=\"col-lg-10\">\n                            <br/>\n                            <h2 >List of  Students</h2>\n                         </div>\n                        <div className=\"col-lg-2\" style={{ margin: \"auto\" }}>\n                            <span className=\"email\">\n                                <Link to={`/AddStudent`} >\n                                    <button className=\"cancelReviewButton\">  Add Student  </button>\n                                </Link>\n                            </span>\n                        </div>\n                    </div>\n                    <br/>\n                    <br/>\n                    \n                    {\n                        this.state.studentList.length ?\n                            this.state.studentList.map(student => <div key={student.id} className=\"seachHeader\" >\n                                <div className=\"cardStyle\">\n                                    <Link to={`/StudentInfo/${student.id}`} >\n                                        <div className=\"hotelList\">\n                                            <span>{student.fullname}</span>\n                                         </div>\n                                    </Link>\n                                    <div className=\"hotelList\">\n                                        <span>\n                                            Level: {student.level}\n                                        </span>\n                                        <span className=\"email\">\n                                            <Link to={`/UpdateStudentInfo/${student.id}`} >\n                                                <button className=\"individualButton\"> Update </button>\n                                            </Link>\n                                            <button type=\"button\" className=\"individualButton\"  onClick={() => this.deleteStudent(student.id)}>\n                                                Delete\n                                            </button>\n                                        </span>\n                                    </div>\n                                </div>\n                            </div>) : (<span>\n                                {this.state.clicked ? (\n                                    <span className=\"seachHeader\">No students Found</span>\n                                ) : (\n                                        null\n                                    )\n                                }\n                            </span>\n                        )\n                    }\n                    <ReactPaginate\n                    previousLabel={\"prev\"}\n                    nextLabel={\"next\"}\n                    breakLabel={\"...\"}\n                    breakClassName={\"break-me\"}\n                    pageCount={this.state.pageCount}\n                    marginPagesDisplayed={2}\n                    pageRangeDisplayed={5}\n                    onPageChange={this.handlePageClick}\n                    containerClassName={\"pagination\"}\n                    subContainerClassName={\"pages pagination\"}\n                    activeClassName={\"active\"}/>\n\n                </div>\n            </div>\n        </div>\n        )\n    }\n\n}\n\n\nexport default StudentList","import React, { Component } from 'react'\nimport '../CSS/Common.css';\nimport StudentList from './StudentList'\n\nclass StudentListComponent extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\" backgroundImage\">\n                    <div className=\"container\">\n                        <StudentList />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default StudentListComponent","import React, { Component } from 'react';\nimport '../CSS/Common.css';\nimport '../CSS/Header.css';\nimport { Redirect } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nclass AddStudent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            name: '',\n            email: '',\n            level: '',\n            course: '',\n            expectation: '',\n            selectedOption: 'BS',\n            responseMessage: '',\n            isInstered: false\n\n        }\n    }\n    changehandler = (e) => {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n    handleOptionChange = (e) => {\n        this.setState({ selectedOption: e.target.value });\n        console.log(this.state.selectedOption)\n    }\n\n    submitHandler = (e) => {\n        e.preventDefault()\n        console.log(this.state.selectedOption)\n        var body = {\n            \"fullname\": this.state.name,\n            \"email\": this.state.email,\n            \"level\": this.state.selectedOption,\n            \"course\": this.state.course,\n            \"expectation\": this.state.expectation\n        }\n        console.log(body)\n        const url = 'https://kgt1c7bjf4.execute-api.us-east-1.amazonaws.com/dev/students'\n        var that = this;\n        fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(body)\n        }).then((responseText) => {\n            const response = responseText.json();\n            response.then(function (response) {\n                that.setState({ responseMessage: response.success })\n                console.log(that.state.responseMessage)\n                if (that.state.responseMessage) {\n                    that.setState({ isInstered: true })\n                    console.log(that.state.isInstered)\n                }\n\n            });\n        }).catch(error => {\n            console.log(error)\n        })\n    }\n    \n\n    render() {\n        const isInstered = this.state.isInstered;\n        return (\n            <div>\n                \n           <div id=\"page-container\" className='mainHeader'>\n                    <div className=\"container sportsClubContainer\">\n                        <span className=\"sportsClubTitle\">\n                            <div className=\"header\">\n                                <span>Add Student</span>\n                            </div>\n                        </span>\n                    </div>\n                </div> \n            <div className=\"card cardStyle\">\n                <div className=\"container searchHeader\">\n                    <form onSubmit={this.submitHandler}>\n                        <div className=\"row\">\n                            <div className=\"col-lg-6\">\n                                <label className=\"userLabel\" htmlFor=\"name\">Name:</label>\n                                <br/>\n                                <input className=\"inputText\" type=\"text\" id=\"name\" value={this.state.name} name=\"name\" onChange={this.changehandler} placeholder=\"Enter your Name\" />\n                            </div>\n                            <div className=\"col-lg-6\">\n                                <label className=\"userLabel\" htmlFor=\"title\">Email:</label>\n                                <br />\n                                <input className=\"inputText\" type=\"text\" id=\"email\" value={this.state.email} name=\"email\" onChange={this.changehandler} placeholder=\"Enter your email\" />\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-lg-6\">\n                                <label className=\"userLabel\" htmlFor=\"name\">Level:</label>\n                                <br/>\n                                 <span className=\"radioButton\">\n                                    <label><input type=\"radio\" value=\"BS\" checked={this.state.selectedOption === \"BS\"} onChange={this.handleOptionChange} /> BS </label>\n                                    <label><input type=\"radio\" value=\"MS\" checked={this.state.selectedOption === \"MS\"} onChange={this.handleOptionChange} /> MS </label>\n                                </span>\n                            </div>\n                            <div className=\"col-lg-6\">\n                                <label className=\"userLabel\" htmlFor=\"title\">Course:</label>\n                                <br />\n                                <input className=\"inputText\" type=\"text\" id=\"course\" value={this.state.course} name=\"course\" onChange={this.changehandler} placeholder=\"Enter the course\" />\n                            </div>\n                        </div> \n                        <br /> <br />\n                        <label className=\"userLabel\" htmlFor=\"title\">Expectation:</label><br />\n                        <textarea className=\"textarea\" type=\"text\" id=\"expectation\" value={this.state.expectation} onChange={this.changehandler} name=\"expectation\" placeholder=\"Please mention your expectation in here...\" />\n                        <br /> <br /><br /> <br />\n                        <div>\n                            <span>\n                                <button type=\"submit\" className=\"addReviewButton\">Add Student</button>\n                            </span>\n                           <span>\n                               <Link to={`/`}>\n                                    <button className=\"cancelReviewButton\">Cancel</button>\n                                </Link>\n                            </span> \n                            \n                        </div>\n                       \n                       {isInstered} \n                        {\n                            isInstered ? (\n                                <Redirect to={`/`} />\n                            ) : (\n                                    <span>{this.state.responseMessage}</span>\n                                )\n                        }\n                    </form>\n                </div>\n            </div>\n            </div>\n        )\n    }\n}\n\nexport default AddStudent","import React, { Component } from 'react'\nimport '../CSS/Common.css';\nimport AddStudent from './AddStudent'\n\nclass AddStudentComponent extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\" backgroundImage\">\n                    <div className=\"container\">\n                        <AddStudent />\n                    </div>\n\n                </div>\n\n            </div>\n        )\n\n    }\n\n}\n\nexport default AddStudentComponent\n","\nimport React, { Component } from 'react';\nimport '../CSS/Common.css';\nimport { Link } from 'react-router-dom';\n\nclass StudentInfo extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            studentInfo: [],\n            studentId: '',\n            responseMessage: \"\"\n        }\n    }\n\n    componentDidMount() {\n        var str = window.location.href\n        var res = str.split(\"/StudentInfo/\");\n\n        const url = 'https://kgt1c7bjf4.execute-api.us-east-1.amazonaws.com/dev/students/' + res[1]\n        var that = this;\n        fetch(url, {\n            method: 'GET'\n        }).then((responseText) => {\n            const response = responseText.json();\n            response.then(function (response) {\n                that.setState({ studentId: res[1] })\n                that.setState({studentInfo: response.data[0].students})\n            });\n        }).catch(error => {\n            console.log(error)\n        })\n\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"card cardStyle\">\n                    <div className=\"searchHeader info\">\n                        <span>\n                            <Link to={`/`} >\n                                 <button className = \"backButton\" >\n                                    Back\n                                </button> \n                            </Link>\n                      \n                        </span>\n                        <div>\n                            Name: {this.state.studentInfo.fullname}\n                            <br/><br/>\n                        </div>\n                        <div>\n                            Email: {this.state.studentInfo.email}\n                            <br /><br/>\n                        </div>\n                        <div>\n                            Level: {this.state.studentInfo.level}\n                            <br /><br/>\n                        </div>\n                        <div>\n                            Course: {this.state.studentInfo.course}\n                            <br /><br/>\n                        </div>\n                        <div>\n                            Expectation: {this.state.studentInfo.expectation}\n                            <br /><br/>\n                        </div>\n                    </div>\n                    \n                </div>\n            </div >\n        )\n    }\n\n}\n\nexport default StudentInfo\n\n","import React, { Component } from 'react'\nimport '../CSS/Common.css';\nimport StudentInfo from './StudentInfo'\n\nclass StudentInfoComponent extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\" backgroundImage\">\n                    <div className=\"container\">\n                        <StudentInfo />\n                    </div>\n\n                </div>\n\n            </div>\n        )\n\n    }\n\n}\n\nexport default StudentInfoComponent\n","import React, { Component } from 'react';\nimport '../CSS/Common.css';\nimport { Redirect } from 'react-router'\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nclass UpdateStudentInfo extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            studentId: '',\n            studentName: '',\n            studentEmail: '',\n            studentLevel: '',\n            studentCourse: '',\n            studentExpectation: '',\n            selectedOption: '',\n            isUpdated: false,\n            responseMessage: ''\n        }\n    }\n    changehandler = (e) => {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n\n    submitHandler = (e) => {\n        e.preventDefault()\n        \n        var body = {\n            \"course\": this.state.studentCourse,\n            \"expectation\": this.state.studentExpectation\n        }\n        console.log(body)\n        const url = 'https://kgt1c7bjf4.execute-api.us-east-1.amazonaws.com/dev/students'\n\n        axios({\n            url,\n            method:\"PUT\",\n            data:body,\n            headers:{\n                 \"Content-Type\": \"application/json\",\n                 'Access-Control-Allow-Methods': '*'\n            }\n        })\n        .then(res => {\n            console.log(res)\n        })\n        .catch(err => console.log(err))\n\n        // fetch(url, {\n        //     method: 'PUT',\n        //     mode:\"cors\",\n            \n            \n        // }).then((responseText) => {\n        //     const response = responseText.json();\n        //     response.then(function (response) {\n        //         that.setState({ responseMessage: response.success })\n        //         console.log(that.state.responseMessage)\n        //         if (that.state.responseMessage) {\n        //             that.setState({ isUpdated: true })\n        //             console.log(that.state.isUpdated)\n        //         }\n\n        //     });\n        // }).catch(error => {\n        //     console.log(error)\n        // })\n    }\n    componentWillMount() {\n         var str = window.location.href\n        var res = str.split(\"/UpdateStudentInfo/\");\n\n        const url = 'https://kgt1c7bjf4.execute-api.us-east-1.amazonaws.com/dev/students/' + res[1]\n        var that = this;\n        fetch(url, {\n            method: 'GET'\n        }).then((responseText) => {\n            const response = responseText.json();\n            response.then(function (response) {\n                console.log(response.data[0].students)\n                that.setState({ studentId: response.data[0].students.id })\n                that.setState({ studentName: response.data[0].students.fullname })\n                that.setState({ studentEmail: response.data[0].students.email  })\n                that.setState({ studentLevel: response.data[0].students.level  })\n                that.setState({ studentCourse: response.data[0].students.course  })\n                that.setState({ studentExpectation: response.data[0].students.expectation  })\n            });\n        }).catch(error => {\n            console.log(error)\n        })\n    }\n\n    render() {\n        const isUpdated = this.state.isUpdated;\n        return (\n            <div className=\"card cardStyle\" style={{ opacity: \"0.9\" }}>\n                <div className=\"container searchHeader\">\n                    <div className=\"contactUsHeader\"><br />Update review</div>\n                    <form onSubmit={this.submitHandler}>\n                        <div className=\"row\">\n                            <div className=\"col-lg-6\">\n                                <label className=\"userLabel\" htmlFor=\"name\">Name:</label>\n                                <br/>\n                                <input className=\"inputText\" type=\"text\" id=\"name\" value={this.state.studentName} name=\"name\" disabled = \"disabled\" placeholder=\"Enter your Name\" />\n                            </div>\n                            <div className=\"col-lg-6\">\n                                <label className=\"userLabel\" htmlFor=\"title\">Email:</label>\n                                <br />\n                                <input className=\"inputText\" type=\"text\" id=\"email\" value={this.state.studentEmail} name=\"email\"  disabled = \"disabled\" placeholder=\"Enter your email\" />\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-lg-6\">\n                                <label className=\"userLabel\" htmlFor=\"name\">Level:</label>\n                                <br/>\n                                 <span className=\"radioButton\">\n                                    <label><input type=\"radio\" value=\"BS\" checked={this.state.studentLevel === \"BS\"} disabled = \"disabled\" /> BS </label>\n                                    <label><input type=\"radio\" value=\"MS\" checked={this.state.studentLevel === \"MS\"} disabled = \"disabled\" /> MS </label>\n                                </span>\n                            </div>\n                            <div className=\"col-lg-6\">\n                                <label className=\"userLabel\" htmlFor=\"title\">Course:</label>\n                                <br />\n                                <input className=\"inputText\" type=\"text\" id=\"studentCourse\" value={this.state.studentCourse} name=\"studentCourse\" onChange={this.changehandler} placeholder=\"Enter the course\" />\n                            </div>\n                        </div> \n                        <br /> <br />\n                        <label className=\"userLabel\" htmlFor=\"title\">Expectation:</label><br />\n                        <textarea className=\"textarea\" type=\"text\" id=\"studentExpectation\" value={this.state.studentExpectation} onChange={this.changehandler} name=\"studentExpectation\" placeholder=\"Please mention your expectation in here...\" />\n                        <br /> <br /><br /> <br />\n                        <div>\n                            <span>\n                                <button type=\"submit\" className=\"addReviewButton\">Update Student Info</button>\n                            </span>\n                           <span>\n                               <Link to={`/`}>\n                                    <button className=\"cancelReviewButton\">Cancel</button>\n                                </Link>\n                            </span> \n                            \n                        </div>\n                        {\n                            isUpdated ? (\n                                <Redirect to={`/`} />\n                            ) : (\n                                    <span>{this.state.responseMessage}</span>\n                                )\n                        }\n                    </form>\n                   \n                </div >\n            </div >\n        )\n    }\n}\n\nexport default UpdateStudentInfo","import React, { Component } from 'react'\nimport '../CSS/Common.css';\nimport UpdateStudentInfo from './UpdateStudentInfo'\n\nclass UpdateStudentInfoComponent extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\" backgroundImage\">\n                    <div className=\"container\">\n                        <UpdateStudentInfo />\n                    </div>\n\n                </div>\n\n            </div>\n        )\n\n    }\n\n}\n\nexport default UpdateStudentInfoComponent","import React, { Component } from 'react'\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\nimport {parseString} from 'xml2js';\n\nconst CLIENT_ID = '20907852666-orck781pvpf5kd1abcph7gd3hq91aval.apps.googleusercontent.com';\nclass GoogleBtn extends Component {\n   constructor(props) {\n    super(props);\n    this.state = {\n      isLogined: false,\n      accessToken: '',\n      accesskey: '',\n      secretkey: '',\n      sessiontoken: '' \n    };\n\n    this.login = this.login.bind(this);\n    this.handleLoginFailure = this.handleLoginFailure.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleLogoutFailure = this.handleLogoutFailure.bind(this);\n  }\n  \n  login (response) {\n    if(response.accessToken){\n      let ak = '';\n      let sk = '';\n      let st = '';\n      console.log(response)\n      const url = 'https://sts.amazonaws.com/?Action=AssumeRoleWithWebIdentity&DurationSeconds=3600&RoleSessionName=CloudComputing&RoleArn=arn:aws:iam::523040592842:role/CloudComputing&WebIdentityToken=' + response.tokenId + '&Version=2011-06-15';\n        fetch(url)\n          .then((response) => response.text())\n          .then((responseText) => {\n            parseString(responseText, function (err, result) {\n              console.log(result.AssumeRoleWithWebIdentityResponse.AssumeRoleWithWebIdentityResult[0].Credentials[0].AccessKeyId[0])\n              ak = result.AssumeRoleWithWebIdentityResponse.AssumeRoleWithWebIdentityResult[0].Credentials[0].AccessKeyId[0]\n              sk = result.AssumeRoleWithWebIdentityResponse.AssumeRoleWithWebIdentityResult[0].Credentials[0].SecretAccessKey[0]\n              st = result.AssumeRoleWithWebIdentityResponse.AssumeRoleWithWebIdentityResult[0].Credentials[0].SessionToken[0]\n            }); \n            this.setState(state => ({\n              isLogined: true,\n              accessToken: response.accessToken,\n              accesskey: ak,\n              secretkey: sk,\n              sessiontoken: st\n              \n            }));\n            localStorage.setItem('ak', ak);\n            localStorage.setItem('st', st);\n            localStorage.setItem('sk', sk);\n            console.log(this.state)\n            this.props.history.push('/StudentList', { detail: {ak,sk,st}});\n          })\n          .catch((error) => {\n            console.log('Error fetching the feed: ', error);\n          })\n    }\n  }\n\n  logout (response) {\n    this.setState(state => ({\n      isLogined: false,\n      accessToken: ''\n    }));\n  }\n\n  handleLoginFailure (response) {\n    alert('Failed to log in')\n  }\n\n  handleLogoutFailure (response) {\n    alert('Failed to log out')\n  }\n\n  render() {\n    return (\n    <div>\n      { this.state.isLogined ? \n       <GoogleLogout\n          clientId={ CLIENT_ID }\n          buttonText='Logout'\n          onLogoutSuccess={ this.logout }\n          onFailure={ this.handleLogoutFailure }\n        >\n        </GoogleLogout>: <GoogleLogin\n          clientId={ CLIENT_ID }\n          buttonText='Login'\n          onSuccess={ this.login }\n          onFailure={ this.handleLoginFailure }\n          cookiePolicy={ 'single_host_origin' }\n          responseType='code,token'\n        />\n      }\n      {this.state.isLogined? (<div>\n        {this.state.accessToken}\n        </div>) : null}\n    </div>\n    )\n  }\n}\n\nexport default GoogleBtn;","import React from 'react';\nimport './App.css';\nimport StudentListComponent from './Components/StudentListComponent'\nimport AddStudentComponent from './Components/AddStudentComponent'\nimport StudentInfoComponent from './Components/StudentInfoComponent'\nimport UpdateStudentInfoComponent from './Components/UpdateStudentInfoComponent'\nimport GoogleBtn from './Components/GoogleBtn';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nfunction App() {\n  return (\n    <div> \n      <Router>\n        <div>\n          <Switch> \n              <Route exact path='/' component={GoogleBtn}></Route> \n              {/* <Route path=\"/StudentList\" render={(props) => <StudentListComponent {...props}/>}/> */}\n              <Route exact path='/StudentList' component={StudentListComponent}></Route> \n              <Route exact path='/AddStudent' component={AddStudentComponent}></Route> \n              <Route exact path='/StudentInfo/:hotelId' component={StudentInfoComponent}></Route> \n              <Route exact path='/UpdateStudentInfo/:hotelId' component={UpdateStudentInfoComponent}></Route> \n            </Switch> \n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}